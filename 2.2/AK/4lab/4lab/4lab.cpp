// 4lab.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#define N 6

// k = 1, N = 6. A, B
int getValue()
{
    while (true) // цикл продолжается до тех пор, пока пользователь не введёт корректное значение
    {
        int a;
        std::cin >> a;
        // Проверка на предыдущее извлечение
        if (std::cin.fail()) // если предыдущее извлечение оказалось неудачным
        {
            std::cin.clear(); // то возвращаем cin в 'обычный' режим работы
            std::cin.ignore(32767, '\n'); // и удаляем значения предыдущего ввода из входного буфера
            std::cout << "К сожалению, ввод неверен. Пожалуйста, попробуйте еще раз.\n";
        }
        else
        {
            std::cin.ignore(32767, '\n'); // удаляем лишние значения
            return a;
        }
    }
}
int main() {
    setlocale(LC_ALL, "Rus");
    system("color F0");
    int A[13], 
        B[8], S, Y = 0;
    int k = 1, Nul;
    for (int i = 0; i < 13; i++) 
    {
        std::cout << "Введите число A[" << i << "] = ";
        A[i] = getValue();
    }
    for (int i = 0; i < 8; i++)
    {
        std::cout << "Введите число B[" << i << "] = ";
        B[i] = getValue();
    }
    
    std::cout << "A: ";
    for (int i = 0; i < 13; i++) {
        std::cout << A[i] << " ";
    }
    std::cout << "\n" << "B: ";
    for (int i = 0; i < 8; i++) {
        std::cout << B[i] << " ";
    }
    std::cout << "\n";
    
    _asm
    {
        jz Start
        Start:
        mov esi, k
        mov ecx, k
        imul ecx, k; k** 2
        imul ecx, [A + 4*esi]; k** 2 * A[k]
        imul ecx, [A + 4*esi];  k** 2 * A[k] * *2

        mov edi, -4
        imul edi, esi
        mov ebx, [A + 4 * N + edi + 4]
        sub ebx, [B + 4 * esi + 4]
        cmp ebx,0
        je Zero
        mov eax, A[4 * 2 * esi]
        cdq; подготовка к делению
        idiv ebx;


        sub ecx, eax
        add Y, ecx
        add esi, 1
        mov k, esi
        cmp esi, N
            jle Start
        jmp OK
            Zero:
        mov Nul,1
            jmp OK

            OK:
        
    }
    if (Nul == 1) 
    {
        std::cout << "Деление на 0" << std::endl;
    }
    else
    std::cout << "Y = " << Y << std::endl;
    return 0;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
